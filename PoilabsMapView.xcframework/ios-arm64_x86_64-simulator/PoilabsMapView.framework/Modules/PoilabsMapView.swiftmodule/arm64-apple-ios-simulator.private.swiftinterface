// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PoilabsMapView
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import Foundation
import MapboxMaps
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class PLAnnotation : ObjectiveC.NSObject {
  @objc final public let coordinate: CoreLocation.CLLocationCoordinate2D
  @objc final public let poiId: Swift.String
  @objc final public let floorLevel: Swift.Int
  @objc public init(poiId: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int)
  @objc deinit
}
@objc public enum PLAnnotationIconAnchor : Swift.Int {
  case center, bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PLAnnotationManager : ObjectiveC.NSObject {
  @objc deinit
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addAnnotation(toCoordinate coordinate: CoreLocation.CLLocationCoordinate2D, identifier: Swift.String, image: UIKit.UIImage, anchor: PoilabsMapView.PLAnnotationIconAnchor)
  @objc dynamic public func removeAnnotation(withIdentifier identifier: Swift.String)
  @objc dynamic public func removeAnnotations(exceptIdentifier identifier: Swift.String)
  @objc dynamic public func removeAllAnnotations()
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addMultipleAnnotation(points: [PoilabsMapView.PLAnnotation], icon: UIKit.UIImage)
  @objc dynamic public func removeMultipleAnnotation()
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addRouteLines(for coordinates: [[[PoilabsMapView.PLAnnotation]]])
  @objc dynamic public func removeAllRouteLines()
  @objc dynamic public func focusOnRoute(index: Swift.Int)
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addMultipleRouteLines(for coordinates: [[[PoilabsMapView.PLAnnotation]]])
  @objc dynamic public func focusOnMultipleRoute(index: Swift.Int)
  @objc dynamic public func selectLineOnMultipleRoute(index: Swift.Int)
  @objc dynamic public func removeAllMultipleRouteLines()
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addDashedLines(from startCoordinate: CoreLocation.CLLocationCoordinate2D, to endCoordinate: CoreLocation.CLLocationCoordinate2D)
  @objc dynamic public func removeDashedLines()
}
extension PoilabsMapView.PLAnnotationManager {
  @objc dynamic public func addSharedLocationAnnotation(at coordinate: CoreLocation.CLLocationCoordinate2D, image: UIKit.UIImage, title: Swift.String, onNavigatePress: (() -> Swift.Void)?)
  @objc dynamic public func removeSharedLocationAnnotation()
}
@_inheritsConvenienceInitializers @objc public class PLMapUtils : ObjectiveC.NSObject {
  @objc public static func coordinateInCoordinateBounds(coordinate: CoreLocation.CLLocationCoordinate2D, swForBounds sw: CoreLocation.CLLocationCoordinate2D, neForBounds ne: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PLMapViewDelegate {
  @objc func mapViewDidFinishLoading(_ mapView: PoilabsMapView.PLMapView)
  @objc func mapViewDidFollowStateChange(state: PoilabsMapView.PLMapViewFollowState)
  @objc func mapViewDidTapOnPolygonWith(coordinates: [[Swift.Double]])
  @objc func mapViewDidTapOnPointWith(coordinate: CoreLocation.CLLocationCoordinate2D)
  @objc func mapViewDidTap(annotationWithPoiId poiId: Swift.String)
  @objc func mapViewDidDeselectPolygon()
}
@objc public enum PLMapViewFollowState : Swift.Int {
  case follow, none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PLMapView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PoilabsMapView.PLMapViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var annotationManager: PoilabsMapView.PLAnnotationManager!
  @objc @_Concurrency.MainActor @preconcurrency public var isCompassActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, styleUrl: Foundation.URL, accessToken: Swift.String, clickColor: UIKit.UIColor, language: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension PoilabsMapView.PLMapView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCenterWithoutAnimation(_ coordinate: CoreLocation.CLLocationCoordinate2D, zoomLevel: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCameraProperties(maxBoundSw sw: CoreLocation.CLLocationCoordinate2D, maxBoundNe ne: CoreLocation.CLLocationCoordinate2D, maxZoom: Swift.Double, minZoom: Swift.Double, navigationZoom: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func getMapCenterCoordinate() -> CoreLocation.CLLocationCoordinate2D
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCamera(center: CoreLocation.CLLocationCoordinate2D, zoomLevel: Foundation.NSNumber? = nil, bearing: Foundation.NSNumber? = nil, pitch: Foundation.NSNumber? = nil, completion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setCameraThatFits(annotations: [PoilabsMapView.PLAnnotation], forLevel floorLevel: Swift.Int)
}
extension PoilabsMapView.PLMapView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateUserLocation(location: CoreLocation.CLLocation, heading: CoreLocation.CLHeading)
}
extension PoilabsMapView.PLMapView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setFollowState(state: PoilabsMapView.PLMapViewFollowState)
}
extension PoilabsMapView.PLMapView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func deselectPolygon()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func selectPolygon(forCoordinate coordinate: CoreLocation.CLLocationCoordinate2D)
}
extension PoilabsMapView.PLMapView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hideLayersWithPrefix(_ prefix: Swift.String)
}
extension PoilabsMapView.PLAnnotationIconAnchor : Swift.Equatable {}
extension PoilabsMapView.PLAnnotationIconAnchor : Swift.Hashable {}
extension PoilabsMapView.PLAnnotationIconAnchor : Swift.RawRepresentable {}
extension PoilabsMapView.PLMapViewFollowState : Swift.Equatable {}
extension PoilabsMapView.PLMapViewFollowState : Swift.Hashable {}
extension PoilabsMapView.PLMapViewFollowState : Swift.RawRepresentable {}
